name: CI Pipeline

on:
  push:
    branches:
      - main
      - beta
  pull_request:
    branches:
      - '**'

jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Set up Node.js with Cache and Install
        uses: ./.github/actions/install-dependencies
        with:
          node-version: '22.15.0'

      - name: Fetch main branch and run commitlint
        if: github.event_name == 'pull_request' && github.event.pull_request.user.login != 'dependabot[bot]'
        run: |
          git fetch origin main
          npx commitlint --from=origin/main

      - name: Run linters (eslint, markdownlint)
        run: |
          npm run eslint
          npm run markdownlint

      - name: Run Hadolint on Dockerfile
        uses: hadolint/hadolint-action@54c9adbab1582c2ef04b2016b760714a4bfde3cf # v3.1.0
        with:
          dockerfile: ./Dockerfile

      - name: Run tests
        run: npm run test:coverage

      - name: Report coverage to Codacy
        if: github.ref == 'refs/heads/main'
        env:
          CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}
        run: wget -qO - https://coverage.codacy.com/get.sh | bash -s -- report -r ./coverage/cobertura-coverage.xml

      - name: Build the project
        run: npm run build:cli

      - name: Upload tests artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: tests-artifacts
          path: |
            ./dist
            ./bin
          retention-days: 1

  debug:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: tests
    strategy:
      matrix:
        node-version: [20, 22, 24]
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Download build artifacts
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: tests-artifacts
          path: ./

      - name: Set up Node.js with Cache and Install
        uses: ./.github/actions/install-dependencies
        with:
          node-version: ${{ matrix.node-version }}

      - name: Run debug:bin
        run: |
          node -v
          npm -v
          npm run debug:bin

  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Node.js with Cache and Install
        uses: ./.github/actions/install-dependencies
        with:
          node-version: '22.15.0'

      - name: Generate new version
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npx semantic-release --dry-run --no-ci

      - name: Build the project
        run: |
          export VERSION=$(cat .VERSION)
          npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: build-artifacts
          path: |
            ./dist
            ./bin
            ./pkg
          retention-days: 7

  build_sea:
    runs-on: ubuntu-latest
    needs:
      - build
    strategy:
      matrix:
        arch: [amd64, arm64]
        os: [alpine, bullseye]
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Download build artifacts
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: build-artifacts
          path: ./

      - name: Set up QEMU for multi-arch
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0
        with:
          platforms: linux/arm64

      - name: Build SEA
        run: |
          docker run --rm --platform linux/${{ matrix.arch }} -v "$PWD":/app -w /app node:22.15.0-${{ matrix.os }} ./scripts/generate-sea.sh ./sea/dclint-${{ matrix.os }}-${{ matrix.arch }}

      - name: Upload build SEA artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: build-sea-artifacts-${{ matrix.os }}-${{ matrix.arch }}
          path: |
            ./sea
          retention-days: 7

  release:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs:
      - tests
      - build
      - build_sea

    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      # ----------
      # Download and Organize Artifacts
      # ----------

      - name: Download Artifacts
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0

      - name: Organize downloaded artifacts
        run: |
          mv build-artifacts/* .

          mkdir -p ./sea
          for dir in build-sea-artifacts-*; do
             mv "$dir/"* ./sea
          done

      # ----------
      # Create npm release, tag, github release
      # ----------

      - name: Set up Node.js with Cache and Install
        uses: ./.github/actions/install-dependencies
        with:
          node-version: '22.15.0'

      - name: Run semantic-release
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          npx semantic-release > semantic-release.log
          if grep -q 'Published release' semantic-release.log; then
            echo "RELEASE_CREATED=true" >> $GITHUB_OUTPUT
          else
            echo "RELEASE_CREATED=false" >> $GITHUB_OUTPUT
          fi

      - name: Exit early if no release
        if: steps.semantic.outputs.RELEASE_CREATED == 'false'
        run: |
          echo "No release was published â€” skipping Docker publish."

      - name: Upload release artifacts
        if: steps.semantic.outputs.RELEASE_CREATED == 'true'
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: release-artifacts
          path: |
            ./package.json
            ./package-lock.json
            ./CHANGELOG.md
          retention-days: 1

      # ----------
      # Publishing Docker images
      # ----------

      - name: Get build arguments
        if: steps.semantic.outputs.RELEASE_CREATED == 'true'
        id: vars
        run: |
          BUILD_DATE=$(date +%Y-%m-%dT%T%z)
          BUILD_VERSION=$(awk -F\" '/"version":/ {print $4}' package.json)
          BUILD_REVISION=$(git rev-parse --short HEAD)
          echo "BUILD_DATE=$BUILD_DATE" >> $GITHUB_ENV
          echo "BUILD_VERSION=$BUILD_VERSION" >> $GITHUB_ENV
          echo "BUILD_REVISION=$BUILD_REVISION" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        if: steps.semantic.outputs.RELEASE_CREATED == 'true'
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0
        with:
          install: true

      - name: Log in to DockerHub
        if: steps.semantic.outputs.RELEASE_CREATED == 'true'
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Build and push the Alpine version
      - name: Build and push Alpine version
        if: steps.semantic.outputs.RELEASE_CREATED == 'true'
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/dclint:alpine
            ${{ secrets.DOCKERHUB_USERNAME }}/dclint:latest-alpine
            ${{ secrets.DOCKERHUB_USERNAME }}/dclint:${{ env.BUILD_VERSION }}-alpine
          build-args: |
            BUILD_DATE=${{ env.BUILD_DATE }}
            BUILD_VERSION=${{ env.BUILD_VERSION }}
            BUILD_REVISION=${{ env.BUILD_REVISION }}
          target: alpine-version
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Build and push the Scratch version
      - name: Build and push Scratch version
        if: steps.semantic.outputs.RELEASE_CREATED == 'true'
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/dclint:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/dclint:${{ env.BUILD_VERSION }}
          build-args: |
            BUILD_DATE=${{ env.BUILD_DATE }}
            BUILD_VERSION=${{ env.BUILD_VERSION }}
            BUILD_REVISION=${{ env.BUILD_REVISION }}
          target: scratch-version
          cache-from: type=gha
          cache-to: type=gha,mode=max
